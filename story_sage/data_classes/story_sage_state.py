from typing import List, TypedDict, Literal
from ..story_sage_conversation import StorySageConversation

class StorySageState(TypedDict):
    """
    A typed dictionary representing the state of the Story Sage system.

    This class holds all the necessary information required during the processing
    of a user's question, including the question itself, context, and various
    metadata such as book and chapter numbers.
    """
    question: str
    """The user's question."""

    context_filters: dict
    """A dictionary of context filters to apply to the queries context."""

    initial_context: List[str]
    """The initial larger list of chunk summaries retrieved based on the question and filters."""

    target_ids: List[str]
    """The refined list of chunk IDs to return based on evaluating the initial context."""

    secondary_query: str
    """A refined query generated based on the initial_context to get better results."""

    context: List[str]
    """A list of context strings retrieved based on the question and filters."""

    answer: str
    """The answer generated by the language model."""

    book_number: int
    """The number of the book in the series for context filtering."""

    chapter_number: int
    """The chapter number within the book for context filtering."""

    entities: List[str]
    """List of entity IDs extracted from the question."""

    series_id: int
    """The ID of the book series for context filtering."""

    order_by: Literal['earliest', 'most_recent']
    """Determines whether chunks should be returned starting with earliest or most recent."""

    conversation: StorySageConversation
    """The conversation object associated with the current state."""

    node_history: List[str]
    """A list of node IDs representing the path taken through the graph."""

    tokens_used: int
    """The number of tokens used in processing."""